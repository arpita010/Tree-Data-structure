/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        HashMap<Integer,Integer> map=new HashMap<>();
        for(int i=0;i<inorder.length;i++)
        map.put(inorder[i],i);
        TreeNode root=construct(inorder,postorder,0,inorder.length-1,0,postorder.length-1,map);
        return root;
    }
    private TreeNode construct(int[] in,int[] post,int inStart,int inEnd,int postStart,int postEnd,HashMap<Integer,Integer> map)
    {
        if(inStart>inEnd||(postStart>postEnd))return null;
        TreeNode root=new TreeNode(post[postEnd]);
        int rootIndex=map.get(post[postEnd]);
        int numsleft=rootIndex-inStart;
        root.left=construct(in,post,inStart,rootIndex-1,postStart,postStart+numsleft-1,map);
        root.right=construct(in,post,rootIndex+1,inEnd,postStart+numsleft,postEnd-1,map);
        return root;
    }
}
