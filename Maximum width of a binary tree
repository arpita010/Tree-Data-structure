/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 // at each index we start indexing from 1 except root
class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        if(root==null)return 0;
        Queue<Pair> queue=new LinkedList<>();
        queue.add(new Pair(root,0));
        int ans=0;
        while(!queue.isEmpty())
        {
            int min=queue.peek().ind;
            int first=0,last=0;
            int size=queue.size();
            for(int i=0;i<size;i++)
            {
                Pair cur=queue.remove();
                TreeNode node=cur.node;
                int ind=cur.ind;
                if(i==0)first=ind;
                if(i==size-1)last=ind;
                if(node.left!=null)
                queue.add(new Pair(node.left,(ind-min)*2+1));
                if(node.right!=null)
                queue.add(new Pair(node.right,(ind-min)*2+2));
            }
            ans=Math.max(ans,1+(last-first));
        }
        return ans;
    }
}
class Pair
{
    TreeNode node;
    int ind;
    public Pair(TreeNode node,int ind)
    {
        this.node=node;
        this.ind=ind;
    }
}
