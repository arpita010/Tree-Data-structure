/**********************************************************	
	
	Following is the representation of Binary Tree Node:
 	
 	class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;
		
		public BinaryTreeNode(T data) {
			this.data = data;
		}
	}

*********************************************************/
import java.util.*;
public class Solution
{
public static int timeToBurnTree(BinaryTreeNode<Integer> root, int start)
    {
        // Write your code here.
		Map<BinaryTreeNode<Integer>,BinaryTreeNode<Integer>> parent=new HashMap<>();
		int min=0;
		if(root==null)return 0;
		markParents(root,parent);

		Queue<BinaryTreeNode<Integer>> queue=new LinkedList<>();
		Map<BinaryTreeNode<Integer>,Boolean> vis=new HashMap<>();
		BinaryTreeNode<Integer> starting=findStart(start,root);
		queue.add(starting);
		vis.put(starting,true);
		min=-1;
		while(!queue.isEmpty())
		{
			int size=queue.size();
			for(int i=0;i<size;i++)
			{
				BinaryTreeNode<Integer> cur=queue.remove();
				if(cur.left!=null&&vis.get(cur.left)==null)
				{
					queue.add(cur.left);
					vis.put(cur.left,true);
				}
				if(cur.right!=null&&vis.get(cur.right)==null)
				{
					queue.add(cur.right);
					vis.put(cur.right,true);
				}
				if(parent.get(cur)!=null&&vis.get(parent.get(cur))==null)
				{
					queue.add(parent.get(cur));
					vis.put(parent.get(cur),true);
				}
			}
			min++;
		}
		return min;
    }
	private static void markParents(BinaryTreeNode<Integer> root,Map<BinaryTreeNode<Integer>,BinaryTreeNode<Integer>> map)
	{
		Queue<BinaryTreeNode<Integer>> queue=new LinkedList<>();
		queue.add(root);
		while(!queue.isEmpty())
		{
			BinaryTreeNode<Integer> cur=queue.remove();
			if(cur.left!=null)
			{
				queue.add(cur.left);
				map.put(cur.left,cur);
			}
			if(cur.right!=null)
			{
				queue.add(cur.right);
				map.put(cur.right,cur);
			}
		}
	}
	private static BinaryTreeNode<Integer> findStart(int start,BinaryTreeNode<Integer> root)
	{
		if(root==null||root.data==start)return root;
		BinaryTreeNode<Integer> left=findStart(start,root.left);
		BinaryTreeNode<Integer> right=findStart(start,root.right);
		if(left==null)return right;
		else if(right==null)return left;
		return null;
	}
}
