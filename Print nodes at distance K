/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {
        List<Integer> res=new ArrayList<>();
        if(root==null)return res;
        Map<TreeNode,TreeNode> parent=new HashMap<>();
        markParents(root,parent);

        Map<TreeNode,Boolean> visited=new HashMap<>();
        Queue<TreeNode> queue=new LinkedList<>();
        queue.add(target);
        visited.put(target,true);
        int level=0;
        while(!queue.isEmpty())
        {
            int size=queue.size();
            if(level==k)break;
            level++;
            for(int i=0;i<size;i++)
            {
                TreeNode cur=queue.remove();
                if(cur.left!=null&&visited.get(cur.left)==null)
                {
                    queue.add(cur.left);
                    visited.put(cur.left,true);
                }
                if(cur.right!=null&&visited.get(cur.right)==null)
                {
                    queue.add(cur.right);
                    visited.put(cur.right,true);
                }
                if(parent.get(cur)!=null&&visited.get(parent.get(cur))==null)
                {
                    queue.add(parent.get(cur));
                    visited.put(parent.get(cur),true);
                }
            }
        }
        while(!queue.isEmpty())
        {
            res.add(queue.remove().val);
        }
        return res;
    }
    private void markParents(TreeNode root,Map<TreeNode,TreeNode> map)
    {
        Queue<TreeNode> queue=new LinkedList<>();
        queue.add(root);
        while(!queue.isEmpty())
        {
            TreeNode cur=queue.remove();
            if(cur.left!=null)
            {
                queue.add(cur.left);
                map.put(cur.left,cur);
            }
            if(cur.right!=null)
            {
                queue.add(cur.right);
                map.put(cur.right,cur);
            }
        }
    }
}
